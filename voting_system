// SPDX-License-Identifier: MIT

pragma solidity >=0.6.12 <0.9.0;

contract VotingMachine {
    mapping (string => uint256) public votesReceived;
    string[5] public candidateList = ["Candidate 1", "Candidate 2", "Candidate 3", "Candidate 4", "Candidate 5"];
    string public winner;

    function voteForCandidate(string memory candidate) public {
        require(validCandidate(candidate), "Invalid candidate");
        votesReceived[candidate] += 1;
    }

    function totalVotesFor(string memory candidate) view public returns (uint256) {
        require(validCandidate(candidate), "Invalid candidate");
        return votesReceived[candidate];
    }

    function validCandidate(string memory candidate) view public returns (bool) {
        for(uint i = 0; i < candidateList.length; i++) {
            if (keccak256(abi.encodePacked(candidateList[i])) == keccak256(abi.encodePacked(candidate))) {
                return true;
            }
        }
        return false;
    }

    function declareWinner() public {
        uint256 winningVoteCount = 0;
        for(uint i = 0; i < candidateList.length; i++) {
            if (votesReceived[candidateList[i]] > winningVoteCount) {
                winningVoteCount = votesReceived[candidateList[i]];
                winner = candidateList[i];
            }
        }
    }
}
