pip install yfinance pandas matplotlib ta numpy flask
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

# Function to implement and backtest the marubozu strategy
def backtest_marubozu_strategy(data, initial_investment=10000):
    # Signal Generation
    data['Buy_Signal'] = (data['Open'] == data['Low']).astype(int)#bullish_marubozu(green)
    data['Sell_Signal'] = (data['Open'] == data['High']).astype(int)#bearish_marubozu(red)

    # Trade positions
    data['Position'] = 0  # Initial position is neutral
    trades = 0  # To count the number of trades
    for i in range(1, len(data)):
        if data['Buy_Signal'].iloc[i] and data['Position'].iloc[i-1] == 0:
            data.at[data.index[i], 'Position'] = 1  # Buy
            trades += 1
        elif data['Sell_Signal'].iloc[i] and data['Position'].iloc[i-1] == 1:
            data.at[data.index[i], 'Position'] = 0  # Sell
            trades += 1
        else:
            data.at[data.index[i], 'Position'] = data['Position'].iloc[i-1]  # Hold

    # Calculate the returns
    data['Market_Return'] = data['Close'].pct_change()
    data['Strategy_Return'] = data['Market_Return'] * data['Position'].shift(1)

    # Calculate cumulative returns
    data['Cumulative_Market_Return'] = (1 + data['Market_Return']).cumprod()
    data['Cumulative_Strategy_Return'] = (1 + data['Strategy_Return']).cumprod()

    # Calculate the final portfolio value
    data['Portfolio_Value'] = initial_investment * data['Cumulative_Strategy_Return']
    final_portfolio_value = data['Portfolio_Value'].iloc[-1]

    return data, final_portfolio_value, trades

# Fetch marubozu historical data ( 1 day timeframe )
ticker = 'NVDA'
data = yf.download(ticker, start='2010-05-01', end='2024-06-11', interval='1d')

# Backtest the intraday strategy
result, final_portfolio_value, trades = backtest_marubozu_strategy(data)

# Plot the results
plt.figure(figsize=(14, 7))
plt.plot(result.index, result['Cumulative_Market_Return'], label='Market Return since 2010', color='red')
plt.plot(result.index, result['Cumulative_Strategy_Return'], label='Strategy Return since 2010', color='green')
plt.title(f'{ticker} Marubozu Trading Strategy Backtest')
plt.xlabel('Date')
plt.ylabel('Cumulative Return')
plt.legend()
plt.show()

# Print the final returns and the number of trades
print(f"Final Portfolio Value: ${final_portfolio_value:.2f}")
final_return=((final_portfolio_value-10000)/10000)*100
print(" final return is",((final_portfolio_value-10000)/10000)*100,"%")
print(f"Number of Trades: {trades}")
cagr = (((final_portfolio_value/10000) ** (1 / 14)) - 1)*100
print(cagr)


# Check profitability
if final_return > 0:
    print("The strategy is profitable.")
else:
    print("The strategy is not profitable.")

    
